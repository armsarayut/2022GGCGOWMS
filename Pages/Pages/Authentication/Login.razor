@page "/"
@page "/pages/authentication/login"
@layout LoginLayout
@using GoWMS.Server.Data;
@using GoWMS.Server.Controllers
@using NETCore.Encrypt;

@inject IJSRuntime JSRunTime
@using System.Security.Claims
@using Microsoft.Extensions.Configuration
@using GoWMS.Server.Models;
@using System.DirectoryServices

@inject IConfiguration Configuration
@inject UserServices ObjUserService
@inject ReportService UserlogService
@inject ISnackbar Snackbar

@inject NavigationManager navigationManager

<MudText Typo="Typo.h4" GutterBottom="true">Sign In to GoWMS</MudText>

@* <MudText>Don't have an account? <MudLink Href="/pages/authentication/register" Color="Color.Error">Sign Up</MudLink></MudText>*@

<MudTextField T="string" @bind-Value="@Userword" Label="UserID" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility"  OnKeyUp="KeyUp"/>

<br />


<MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" OnClick="@btnLogin_Click">Sign In</MudButton>



@code {
    string Password { get; set; } = "";
    string Userword { get; set; } = "";
    private IEnumerable<Userinfo> UserElements = new List<Userinfo>();
    private IEnumerable<Userinfo> UserAdElements = new List<Userinfo>();

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    string sUser { get; set; } = "";
    public string mPagedesc { get; set; } = "Gowms";
    private string mPagename { get; set; } = "/Login";

    private string pageheader = "Gowms";

     private ResultReturn resultReturn = null;


    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        await Task.Run(() => ObjUserService.InsertMenu(mPagename, mPagedesc));

    }

    private async Task btnLogin_Click()
    {

        if (Userword.Length > 0)
        {
            if  (Password.Length > 0)
            {
                var key = Configuration.GetSection("Appkey")["Pass"].ToString();
                //var encrypted = Security.EncryptString(Password, key);
                var encrypted = EncryptProvider.DESEncrypt(Password, key);

                UserElements = await Task.Run(() => ObjUserService.GetUser(Userword, encrypted));

                if (UserElements.Count() > 0)
                {
                    var grouid = UserElements.Select(x => x.Usgid).FirstOrDefault();
                    var result1 = UserElements.Where(i => i.Usgid == grouid.Value).FirstOrDefault(); // = 0
                    sUserID = result1.Usid.ToString();
                    sUser = result1.UserId.ToString();
                    this.InsertAuditrial("SignIn User : " + sUser, pageheader);
                    var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
                    await authModule.InvokeVoidAsync("SignIn", sUser, encrypted, grouid.ToString(), sUserID, "/gowms");
                    var authModules = authModule;
                }
                else
                {

                    if (HandleValidSubmit(Userword, Password)) // Check User On Ad
                    {

                        resultReturn = ObjUserService.UpsertRegisterAD(5, Userword, encrypted, Userword);

                        if (resultReturn.Bret == true)
                        {
                            UserAdElements = await Task.Run(() => ObjUserService.GetUserAD(Userword, encrypted));

                            if (UserAdElements.Count() > 0)
                            {
                                var grouid = UserAdElements.Select(x => x.Usgid).FirstOrDefault();

                                var result1 = UserAdElements.Where(i => i.Usgid == grouid.Value).FirstOrDefault(); // = 0

                                sUserID = result1.Usid.ToString();
                                sUser = result1.UserId.ToString();

                                this.InsertAuditrial("SignIn User : " + sUser, pageheader);

                                var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
                                await authModule.InvokeVoidAsync("SignIn", sUser, encrypted, grouid.ToString(), sUserID, "/gowms");
                                var authModules = authModule;
                            }
                            else
                            {
                                Snackbar.Add("GetUserAD Fail", Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add(resultReturn.Sret, Severity.Error);
                        }



                    }else{
                        Snackbar.Add("The " + Userword + " user was not found in the system.", Severity.Error);
                    }


                }
            }
            else
            {
                Snackbar.Add("Please Enter Password", Severity.Warning);
            }

        }
        else
        {
            Snackbar.Add("Please Enter UserID", Severity.Warning);
        }


        //navigationManager.NavigateTo("/dashboard" );

        //SetUser();

    }

    private async void btnLogout_Click()
    {
        var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
        await authModule.InvokeVoidAsync("SignOut", "/");
    }

    void SetUser()
    {
        //GoWMS.Server.Data.CurrentUserName = Userword;
        //GoWMS.Server.Data.VarGlobals.

        VarGlobals.CurrentUserName = Userword;

        /*
        Action<VarGlobals> mduOptions = (opt =>
            {
            opt.CurrentUserName = Userword;
        });
        */
        var srcString = Password;
        var key = "czsqO+DxnA1EcyurkKdllA==";

        var encrypted = EncryptProvider.DESEncrypt(srcString, key);
        var decrypted = EncryptProvider.DESDecrypt(encrypted, key);

        VarGlobals.User.UserID = 1;
        VarGlobals.User.UserName = Userword;
        VarGlobals.User.DeepID = 1;
        VarGlobals.User.GroupID = 1;

        navigationManager.NavigateTo("/gowms");

        // navigationManager.NavigateTo("/");

        //navigationManager.NavigateTo("");

    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private async void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Task.Run(() => btnLogin_Click());
        }
    }

    private bool HandleValidSubmit(string userName, string passWord)
    {
        bool bRet = false;

        string sIPServer = Configuration.GetSection("ADHost")["IP"].ToString() + ":" + Configuration.GetSection("ADHost")["Port"].ToString();
        string sDomain = Configuration.GetSection("ADHost")["Domain"].ToString();
        string sLdapPath = Configuration.GetSection("ADHost")["LdapPath"].ToString();
        string sFilter = Configuration.GetSection("ADHost")["Filter"].ToString();

        string strCommu = "LDAP://" + sIPServer + Convert.ToString(Convert.ToString("/") + sLdapPath);

        var entry = new DirectoryEntry(strCommu);
        entry.Username = Convert.ToString(sDomain + Convert.ToString(@"\")) + userName;
        entry.Password = passWord;

        object obj;
        try
        {
            obj = entry.NativeObject;
            var search = new DirectorySearcher(entry);
       
            //search.ClientTimeout = TimeSpan.FromSeconds(10);
            SearchResult result;
            search.Filter = sFilter;

            //search.Filter = "(objectclass=user)";

            result = search.FindOne();

            if (result is null)
            {
                bRet = false;
                //Snackbar.Add("AD Login Fail", Severity.Warning);
            }

            else
            {
                bRet = true;
                //Snackbar.Add("AD Login OK", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            bRet = false;
            Log.Error(ex.ToString());
        }

        return bRet;
    }
}



