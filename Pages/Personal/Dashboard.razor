@page "/gowms"
@using GoWMS.Server.Models.Das
@using GoWMS.Server.Models.Public
@using GoWMS.Server.Models.Wcs

@using System.Threading
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers

@inject IStringLocalizer<Dashboard> L
@inject ErpApiService ObjErpService
@*@inject WgcService ObjErpService*@
@inject InboundService ObjInbService
@inject DashService ObjDashService
@attribute [Authorize]


<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Dashboard</MudText>
@if (TotalPercenuse>=85)
{
    <MudProgressLinear Striped="true" Color="Color.Error" Size="Size.Large" Maximum="100" Value="@TotalPercenuse" Class="my-7">
        <MudText Typo="Typo.subtitle1" Color="Color.Dark">
            <b>used storage : @TotalPercenuse%</b>
        </MudText>
    </MudProgressLinear>
}
else
{
    <MudProgressLinear Striped="true" Color="Color.Info" Size="Size.Large" Maximum="100" Value="@TotalPercenuse" Class="my-7">
        <MudText Typo="Typo.subtitle1" Color="Color.Dark">
            <b>used storage : @TotalPercenuse%</b>
        </MudText>
    </MudProgressLinear>
}


<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["PendingReceving"]</MudText>
                <MudText Typo="Typo.h5">@palletGR / @orderGR</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Queue" Color="Color.Secondary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["PendingPutaway"]</MudText>
                <MudText Typo="Typo.h5">@palletPut / @orderPut</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Success" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["Pendingpicking"]</MudText>
                <MudText Typo="Typo.h5">@palletPicking / @orderPicking</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Warning" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">@L["CompleteOrder"]</MudText>
                <MudText Typo="Typo.h5">@orderCompletePut / @orderCompletePick</MudText>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Primary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">ASRS @L["Storage"]</MudText>
                <MudText Typo="Typo.h5">@mstorage</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Secondary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">ASRS @L["Retrieval"]</MudText>
                <MudText Typo="Typo.h5">@mretrieval</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Success" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">ASRS @L["Total"]</MudText>
                <MudText Typo="Typo.h5">@asrstaskcompletenow / @asrstaskcompletelast</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Speed" Color="Color.Warning" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">ASRS @L["AverageTime"]</MudText>
                <MudText Typo="Typo.h5">@asrstasktimenow / @asrstasktimelast</MudText>
            </div>
        </MudPaper>
    </MudItem>


     <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Primary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">RGV @L["Storage"]</MudText>
                <MudText Typo="Typo.h5">@rstorage</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Secondary" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">RGV @L["Retrieval"]</MudText>
                <MudText Typo="Typo.h5">@rretrieval</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Success" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">RGV @L["Total"]</MudText>
                <MudText Typo="Typo.h5">@rgvtaskcompletenow / @rgvtaskcompletelast</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:90px;">
            <MudIcon Icon="@Icons.Material.Filled.Speed" Color="Color.Warning" Class="mx-4" Style="width:50px; height:50px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">RGV @L["AverageTime"]</MudText>
                <MudText Typo="Typo.h5">@rgvtasktimenow / @rgvtasktimelast</MudText>
            </div>
        </MudPaper>
    </MudItem>
     

     <MudItem xs="12" sm="6">
        <MudCard Elevation="25" Style="height:350px;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.button">@L["Lane"] 01</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudPaper Class="d-flex py-2 px-1">
                <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")"><MudText Typo="Typo.button">@L["Use"]: @L1Use</MudText></MudPaper>
                <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-3" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")"><MudText Typo="Typo.button">@L["Empty"]: @L1Emp</MudText></MudPaper>
                <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")"><MudText Typo="Typo.button">@L["Total"]: @L1Total</MudText></MudPaper>
            </MudPaper>
            <br />
            <MudChart ChartType="ChartType.Pie" InputData="@data1" @bind-SelectedIndex="Index1" InputLabels="@labels1" Width="150px" Height="150px" />
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudCard Elevation="25" Style="height:350px;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.button">@L["Lane"] 02</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudPaper Class="d-flex py-2 px-1">
                <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-2" Style="@($"color:{Colors.Shades.White}; background:rgb(41, 121, 255);")"><MudText Typo="Typo.button">@L["Use"]: @L2Use</MudText></MudPaper>
                <MudPaper Class="flex-grow-1 flex-shrink-0 pa-2 mx-2 order-3" Style="@($"color:{Colors.Shades.White}; background:rgb(83, 199, 144);")"><MudText Typo="Typo.button">@L["Empty"]: @L2Emp</MudText></MudPaper>
                <MudPaper Class="flex-grow-1 flex-shrink-1 pa-2 mx-2 order-1" Style="@($"color:{Colors.Shades.White}; background:rgb(255, 64, 129);")"><MudText Typo="Typo.button">@L["Total"]: @L2Total</MudText></MudPaper>
            </MudPaper>
            <br />
            <MudChart ChartType="ChartType.Pie" InputData="@data2" @bind-SelectedIndex="Index2" InputLabels="@labels2" Width="150px" Height="150px" />
        </MudCard>
    </MudItem>



</MudGrid>

@code {
    private System.Threading.Timer timer;
    private List<DasLocation> daslos;
    private DasLocation daslocations = new DasLocation();

    private Int64 palletGR = 0;
    private Int64 orderGR = 0;

    private Int64 palletPut = 0;
    private Int64 orderPut = 0;

    private Int64 palletPicking = 0;
    private Int64 orderPicking = 0;

    private Int64 palletComplete = 0;
    private Int64 orderComplete = 0;

    private Int64 orderCompletePut = 0;
    private Int64 orderCompletePick = 0;


    private Int64 mstorage = 0;
    private Int64 mstorageemp = 0;
    private Int64 mretrieval = 0;
    private Int64 mretrievalemp = 0;
    private Int64 mtotal = 0;

    private Int64 L1Total = 0;
    private Int64 L1Use = 0;
    private Int64 L1Emp = 0;


    private Int64 L2Total = 0;
    private Int64 L2Use = 0;
    private Int64 L2Emp = 0;

    private Double TotalPercenuse = 0.0;

    private Int64 L3Total = 0;
    private Int64 L3Use = 0;
    private Int64 L3Emp = 0;

    private Int64 L4Total = 0;
    private Int64 L4Use = 0;
    private Int64 L4Emp = 0;


    private Int64 rstorage = 0;
    private Int64 rstorageemp = 0;
    private Int64 rretrieval = 0;
    private Int64 rretrievalemp = 0;
    private Int64 rtotal = 0;

    private Boolean bRun = true;

    private int Count { get; set; } = 10;
    private Boolean bRefresh = false;

    private IEnumerable<Vrpt_operationresult_sum> Elementorders = new List<Vrpt_operationresult_sum>();

    private IEnumerable<Vrpt_shelfsummary> Elementlocation = new List<Vrpt_shelfsummary>();

    private IEnumerable<VLocationDash> ElementWorks = new List<VLocationDash>();

    private IEnumerable<VLocationDash> ElementRgvWorks = new List<VLocationDash>();

    private IEnumerable<DashTaskTime> AsrsCompleteData = new List<DashTaskTime>();

    private IEnumerable<AsrsTaskSummary> AsrsTaskofday = new List<AsrsTaskSummary>();


    private IEnumerable<DashTaskTime> RgvCompleteData = new List<DashTaskTime>();

    class EarningReport
    {
        public string Avatar;
        public string Name;
        public string Title;
        public Color Severity;
        public string SeverityTitle;
        public string Salary;
    }

    private int Index1 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize1 = 2;
    double[] data1 = { 80, 10, 10, 10 };
    string[] labels1 = { "Use", "Free", "Block", "Stack" };
    string[] xlabels1 = { "80", "100" };

    private int Index2 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize2 = 2;
    double[] data2 = { 80, 10, 10, 10 };
    string[] labels2 = { "Use", "Free", "Block", "Stack" };
    string[] xlabels2 = { "80", "100" };

    private int Index3 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize3 = 2;
    double[] data3 = { 80, 10, 10, 10 };
    string[] labels3 = { "Use", "Free", "Block", "Stack" };
    string[] xlabels3 = { "80", "100" };

    private int Index4 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize4 = 2;
    double[] data4 = { 80, 10, 10, 10 };
    string[] labels4 = { "Use", "Free", "Block", "Stack" };
    string[] xlabels4 = { "80", "100" };


    string asrstasktimenow { get; set; } = "";
    Int64 asrstaskcompletenow { get; set; } = 0;

    string asrstasktimelast { get; set; } = "";
    Int64 asrstaskcompletelast { get; set; } = 0;

    Int64 asrstaskpro { get; set; } = 0;
    Int64 asrstaskque { get; set; } = 0;


    string rgvtasktimenow { get; set; } = "";
    Int64 rgvtaskcompletenow { get; set; } = 0;

    string rgvtasktimelast { get; set; } = "";
    Int64 rgvtaskcompletelast { get; set; } = 0;

    Int64 rgvtaskpro { get; set; } = 0;
    Int64 rgvtaskque { get; set; } = 0;


    private ChartOptions _lineChartOptions = new ChartOptions
    {
        DisableLegend = true
    };

    protected override async Task OnInitializedAsync()
    {
        //Ticker();

        /////-- Get from ERP
        palletGR = await ObjErpService.GetSumGetApiInboundAll();
        orderGR = await ObjErpService.GetSumGetApiInboundAllACC();
        ////--------------------


        palletPut = await ObjInbService.GetSumPalletAllInbGoodreceiptGo();
        orderPut = await ObjInbService.GetSumOrderAllInbGoodreceiptGo();

        palletPicking = await ObjInbService.GetSumPalletAllOubGoodPickingGo();
        orderPicking = await ObjInbService.GetSumOrderAllOubGoodPickingGo();

        //Elementorders = await Task.Run(() => ObjDashService.GetAllOrderofDay());

        orderCompletePut= await ObjDashService.GetCompleteOrderReceiptofDay();
        orderCompletePick = await ObjDashService.GetCompleteOrderIssueofDay();

        Elementlocation = await Task.Run(() => ObjDashService.GetAllLocationSummary());


        ElementWorks = await Task.Run(() => ObjDashService.GetAllTasworkofday());

        ElementRgvWorks  = await Task.Run(() => ObjDashService.GetAllRGVTasworkofday());

        AsrsCompleteData = await Task.Run(() => ObjDashService.GetASRSDashboardComplete());

        RgvCompleteData  =   await Task.Run(() => ObjDashService.GetRGVDashboardComplete()); 

        //if (Elementorders.ToList().Count > 0)
        //{
        //    var vorderCompletePut = Elementorders.Select(a => a.C01).Single();
        //    orderCompletePut = (Int64)vorderCompletePut;

        //    var vorderCompletePick = Elementorders.Select(a => a.C05).Single();
        //    orderCompletePick = (Int64)vorderCompletePick;
        //}
        //else
        //{
        //    orderCompletePut = 0;
        //    orderCompletePick = 0;

        //}

        var allCorrect1 = Elementlocation.Where(a => a.Srm_No == 1).ToList();

        if (allCorrect1.ToList().Count > 0)
        {
            foreach (var val in allCorrect1)
            {
                //data1.Concat(new double[] { (double)val.Locavl }).ToArray();
                //data1.Concat(new double[] { (double)val.Locemp }).ToArray();

                data1[0] = (double)val.Locavl ;
                data1[1] = (double)val.Locemp ;
                data1[2] = (double)val.Plerr;
                data1[3] = (double)val.Plemp;

                L1Total = (Int64)val.Total;
                L1Use = (Int64)val.Locavl  +  (Int64)val.Plemp;
                L1Emp = (Int64)val.Locemp;
            }
        }
        else
        {
            data1.Append(0);
            data1.Append(0);
            data1.Append(0);
            data1.Append(0);
            L1Total = 0;
            L1Use = 0;
            L1Emp = 0;
        }

        var allCorrect2 = Elementlocation.Where(a => a.Srm_No == 2).ToList();

        if (allCorrect2.ToList().Count > 0)
        {
            foreach (var val in allCorrect2)
            {
                data2[0] = (double)val.Locavl ;
                data2[1] = (double)val.Locemp;
                data2[2] = (double)val.Plerr;
                data2[3] = (double)val.Plemp;

                L2Total = (Int64)val.Total;
                L2Use = (Int64)val.Locavl +  (Int64)val.Plemp;
                L2Emp = (Int64)val.Locemp;
            }
        }
        else
        {
            data2.Append(0);
            data2.Append(0);
            data2.Append(0);
            data2.Append(0);
            L2Total = 0;
            L2Use = 0;
            L2Emp = 0;
        }
        //(float.Parse(L1Use) + float.Parse(L2Use)
        //double aa = L1Use + L2Use;
        //double bb = L1Total + L2Total;
        //double cc = aa / bb;

        //TotalPercenuse = cc * 100 ;

        var allCorrect3 = Elementlocation.Where(a => a.Srm_No == 0).ToList();

        if (allCorrect3.ToList().Count > 0)
        {
            foreach (var val in allCorrect3)
            {
                TotalPercenuse = (double)val.Percen;
            }
        }
        else
        {
            TotalPercenuse = 0;
        }



        var allCorrectTas01 = ElementWorks.Where(a => a.Work_Code == "01").ToList();
        var allCorrectTas101 = ElementWorks.Where(a => a.Work_Code == "101").ToList();

        if (allCorrectTas01.ToList().Count > 0)
        {
            foreach (var val in allCorrectTas01)
            {

                mstorage = (Int64)val.Clpncode;
            }

            if (allCorrectTas101.ToList().Count > 0)
            {
                foreach (var val in allCorrectTas101)
                {

                    mstorageemp = (Int64)val.Clpncode;
                }
            }

            mstorage = mstorage + mstorageemp;


        }
        else
        {

            if (allCorrectTas101.ToList().Count > 0)
            {
                foreach (var val in allCorrectTas101)
                {

                    mstorageemp = (Int64)val.Clpncode;
                }
                mstorage = mstorageemp;
            }
            else{
                mstorage = 0;
            }

        }

        var allCorrectTas05 = ElementWorks.Where(a => a.Work_Code == "05").ToList();
        var allCorrectTas102 = ElementWorks.Where(a => a.Work_Code == "102").ToList();

        if (allCorrectTas05.ToList().Count > 0)
        {
            foreach (var val in allCorrectTas05)
            {

                mretrieval = (Int64)val.Clpncode;
            }

            if (allCorrectTas102.ToList().Count > 0)
            {
                foreach (var val in allCorrectTas102)
                {

                    mretrievalemp = (Int64)val.Clpncode;
                }
            }
            mretrieval = mretrieval + mretrievalemp;

        }
        else
        {

            if (allCorrectTas102.ToList().Count > 0)
            {
                foreach (var val in allCorrectTas102)
                {

                    mretrievalemp = (Int64)val.Clpncode;
                }
                mretrieval = mretrievalemp;
            }
            else
            {
                mretrieval = 0;
            }
        }

        mtotal = mstorage + mretrieval;

        Count = 10;

        if (bRefresh == false)
        {
            this.StartCountdown();
            bRefresh = true;
        }


        var allCorrectTas1001 = ElementRgvWorks.Where(a => a.Work_Code == "1001").ToList();
        var allCorrectTas1002 = ElementRgvWorks.Where(a => a.Work_Code == "1002").ToList();


        if (allCorrectTas1001.ToList().Count > 0)
        {
            rstorage =0;

            foreach (var val in allCorrectTas1001)
            {

                rstorage = (Int64)val.Clpncode;
            }

            //if (allCorrectTas1001.ToList().Count > 0)
            //{
            //    foreach (var val in allCorrectTas1001)
            //    {

            //        mstorageemp = (Int64)val.Clpncode;
            //    }
            //}

            //mrtorage = mstorage + mstorageemp;


        }
        else
        {

            //if (allCorrectTas1001.ToList().Count > 0)
            //{
            //    foreach (var val in allCorrectTas1001)
            //    {

            //        mstorageemp = (Int64)val.Clpncode;
            //    }
            //    mstorage = mstorageemp;
            //}
            //else{
            //    mstorage = 0;
            //}

            rstorage = 0;

        }

        if (allCorrectTas1002.ToList().Count > 0)
        {
            rretrieval=0;

            foreach (var val in allCorrectTas1002)
            {

                rretrieval = (Int64)val.Clpncode;
            }

            //if (allCorrectTas102.ToList().Count > 0)
            //{
            //    foreach (var val in allCorrectTas1002)
            //    {

            //        mretrievalemp = (Int64)val.Clpncode;
            //    }
            //}
            //mretrieval = mretrieval + mretrievalemp;

        }
        else
        {

            //if (allCorrectTas102.ToList().Count > 0)
            //{
            //    foreach (var val in allCorrectTas102)
            //    {

            //        mretrievalemp = (Int64)val.Clpncode;
            //    }
            //    mretrieval = mretrievalemp;
            //}
            //else
            //{
            //    mretrieval = 0;
            //}

            rretrieval = 0;
        }



        ASRSDashboardData();

        RGVDashboardData();


    }

    void ASRSDashboardData()
    {
        //AsrsCompleteData = ObjDashService.GetASRSDashboardComplete();

        // AsrsCompleteData = await Task.Run(() => ObjDashService.GetASRSDashboardComplete());


        if (AsrsCompleteData.ToList().Count > 0)
        {
            foreach (var val in AsrsCompleteData)
            {
                if (val.Checkday.ToString() == "CURR")
                {
                    asrstasktimenow = val.Tasktime.ToString();
                    asrstaskcompletenow = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "LAST")
                {
                    asrstasktimelast = val.Tasktime.ToString();
                    asrstaskcompletelast = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QUEU")
                {
                    asrstaskque = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QPRO")
                {
                    asrstaskpro = val.Counttask.Value;
                }
            }
        }
        else
        {


        }
    }


    void RGVDashboardData()
    {
        if (RgvCompleteData.ToList().Count > 0)
        {
            foreach (var val in RgvCompleteData)
            {
                if (val.Checkday.ToString() == "CURR")
                {
                    rgvtasktimenow = val.Tasktime.ToString();
                    rgvtaskcompletenow = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "LAST")
                {
                    rgvtasktimelast = val.Tasktime.ToString();
                    rgvtaskcompletelast = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QUEU")
                {
                    rgvtaskque = val.Counttask.Value;
                }
                else if (val.Checkday.ToString() == "QPRO")
                {
                    rgvtaskpro = val.Counttask.Value;
                }

               
            }
        }
        else
        {


        }
    }


    private void setstr(string str)
    {
        if (str.Length == 10)
        {
            string sbstr;
            sbstr = str.Substring(0, 1);

            switch (sbstr)
            {
                case "A":
                    stxtInput = "A : " + str.Substring(1, 9);
                    break;
                case "B":
                    stxtInput = "B : " + str.Substring(1, 9);
                    break;
                case "C":
                    stxtInput = "C : " + str.Substring(1, 9);
                    break;
                default:
                    stxtInput = str;
                    break;
            }
        }

    }

    private string stxtInput { get; set; }
    public string MyValue { get; set; }
    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(MyValue);

            MyValue = "";
        }
    }

    string theTime;

    // use an async-void or a timer. An async-void needs no cleanup.
    async void Ticker()
    {
        while (bRun)
        {
            theTime = DateTime.Now.ToLongTimeString();
            // get code ---
            palletGR = await ObjErpService.GetSumGetApiInboundAll();
            orderGR = await ObjErpService.GetSumGetApiInboundAllACC();
            palletPut = await ObjInbService.GetSumPalletAllInbGoodreceiptGo();
            orderPut = await ObjInbService.GetSumOrderAllInbGoodreceiptGo();

            palletPicking = await ObjInbService.GetSumPalletAllOubGoodPickingGo();
            orderPicking = await ObjInbService.GetSumOrderAllOubGoodPickingGo();

            //-----
            await Task.Delay(10_000);
            this.StateHasChanged();   // refresh everything
        }
    }

    void StartCountdown()
    {

    } 
}