@page "/1/1_5"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Inb

@inject MasService ObjMasService
@inject InboundService ObjInboundService
@inject UserServices OpjUserService
@inject ISnackbar Snackbar
@inject IStringLocalizer<InpPutaway> L
@inject IJSRuntime js
@attribute [Authorize]

<MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

<MudGrid>

    <MudItem xs="12">
        @if (elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else @if (elevation == 1) //Info
   {
    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
}
else if (elevation == 2) //Success
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
}
else if (elevation == 3) // Warning
{
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
}
else if (elevation == 4) // Error
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
}
    </MudItem>
    <MudItem xs="12">
        <div class="form-group">
  @*          <input style="width: 100%; height: 40px" type="text" class="form-control" @bind="@palletcode" @onkeydown="@DoTheThing" placeholder="Input scan" />*@
             <input Id="inputBar" style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="@palletcode" @onkeyup="@KeyUp" placeholder="Input scan" />
        </div>
    </MudItem>
</MudGrid>

<MudGrid>
       <MudItem xs="3">
            <MudCheckBox ReadOnly="@ReadOnly" @bind-Checked="@chkboxGate" Label="GATE" Color="Color.Primary" Size="Size.Large"></MudCheckBox>
       </MudItem>
         <MudItem xs="3">
            <MudCheckBox ReadOnly="@ReadOnly" @bind-Checked="@chkboxConfirm" Label="CONFIRM" Color="Color.Success" Size="Size.Large"></MudCheckBox>
        </MudItem>
</MudGrid>






@*<MudText Typo="Typo.h6">@L["MasterPallet"] : [ @mPalletcode ]</MudText>*@



@*@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudTable Items="@Elements"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Inb_Putaway_Go,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@L["MasterPallet"] : [ @mPalletcode ]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>@L["Queuetime"]</MudTh>
            <MudTh>@L["PalletGo"]</MudTh>
            <MudTh>@L["Worktype"]</MudTh>
            <MudTh>@L["SRM"]</MudTh>
            <MudTh>@L["Location"]</MudTh>
            <MudTh>@L["Starttime"]</MudTh>
            <MudTh>@L["Endtime"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Queuetime">@context.Created</MudTd>
            <MudTd DataLabel="PalletGo">@context.Palletno</MudTd>
            <MudTd DataLabel="Worktype">@context.Puttype</MudTd>
            <MudTd DataLabel="SRM">@context.Storagearea</MudTd>
            <MudTd DataLabel="Location">@context.Storagebin</MudTd>
            <MudTd DataLabel="Starttime">@context.Storagetime</MudTd>
            <MudTd DataLabel="Endtime">@context.Completed</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}*@

@code {
    //private string pageheader = "Storage";
    private string msgAction = "Enter Location";
       private string pageheader { get; set; } = "1.5.Stacking";
    private bool _processing = false;

    public string mPagedesc { get; set; } = "1.5.Stacking";
    private string mPagename { get; set; } = "/1/1_5";


    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";

    private string compGate = "STORE-G07";
    private string compCommand = "STORE-CONFIRM";

    private Inb_Putaway_Go selectedItem = null;
    private HashSet<Inb_Putaway_Go> selectedItems = new HashSet<Inb_Putaway_Go>();
    private IEnumerable<Inb_Putaway_Go> Elements = new List<Inb_Putaway_Go>();

    private IEnumerable<Mas_Storagebin_Go> MasterStotageBins = new List<Mas_Storagebin_Go>();

    private IEnumerable<Inb_Putaway_Go> MasterQueue = new List<Inb_Putaway_Go>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;


    public bool chkboxGate { get; set; } = false;
    public bool chkboxConfirm { get; set; } = false;

    public bool ReadOnly { get; set; } = true;



    protected override async Task OnInitializedAsync()
    {
        //InboundService objCS = new InboundService();
        //Elements = await Task.Run(() => objCS.GetAllInbPutawayGos());
        //MasterStotageBins = ObjMasService.GetAllMasterStorageBins();
    }

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus the element
            await Focus("inputBar");
        }
    }

    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("jsfunction.focusElement", elementId);
    }

    private void setstr(string str)
    {

        if (str==compGate)
        {
            chkboxGate = true;

        }else if(str==compCommand)
        {
            chkboxConfirm = true;
        }


        if (chkboxGate== true && chkboxConfirm == true)
        {
            CrestePutAway();

            chkboxConfirm = false;
            chkboxGate = false;
        }

        //if (chkboxGate== true || chkboxConfirm == true)
        //{
        //    StateHasChanged();
        //}

        

        //if (mPalletcode.Length <= 0)
        //{
        //    var allCorrect = MasterStotageBins.Where(a => a.Binno == str).ToList();

        //    if (allCorrect.ToList().Count > 0)
        //    {
        //        mPalletcode = str;
        //        msgAction = "Enter PalletGo";
        //        elevation = 1;
        //    }
        //    else
        //    {
        //        mPalletcode = "";
        //        elevation = 4;
        //        msgAction = "Location find not found";
        //    }
        //}
        //else
        //{
        //    var allCorrect = Elements.Where(a => a.Palletno == str).ToList();

        //    if (allCorrect.ToList().Count > 0)
        //    {
        //        //InQueue
        //        ObjInboundService.SetStorageComplete(str, mPalletcode);
        //        elevation = 2;
        //        msgAction = "Storage successfully";
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        if (mPalletcode.Length > 0)
        //        {
        //            elevation = 1;
        //            msgAction = "Please enter PalletGo";
        //        }
        //        else
        //        {
        //            elevation = 1;
        //            msgAction = "Please enter Location";
        //        }
        //    }
        //}
        //InboundService objGR = new InboundService();
        //Elements = objGR.GetAllInbPutawayGos();
    }

    void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {

            string pallettemp = palletcode;

            setstr(pallettemp);
            Reset();
        }
    }

    private void Reset()
    {
        this.palletcode = string.Empty;
        StateHasChanged();
    }

    private string stxtInput { get; set; }
    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Putaway_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Palletno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Storagebin.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Storagearea}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack)
    {
        /*
        msgAction = "Cancle successfully";
        ObjCustomService.CancelReceivingOrderbypack(mPalletcode, pack);


        CustomerService objGR = new CustomerService();
        Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
        */
    }



    public async Task CrestePutAway()
    {

        string msgReturn = "Call";
        bool bitReturn;
        bitReturn = await Task.Run(() => ObjInboundService.CreatePutawayEmpty("PL001", "EMP01", "G07", "101", ref msgReturn));
        if (bitReturn == false)
        {
            elevation = 4;
            msgAction = msgReturn;

            Snackbar.Add(msgReturn, Severity.Error);

        }
        else
        {
            Snackbar.Add(msgReturn, Severity.Success);
            elevation = 2;
            msgAction = "Mapping successfully";
        }

    }


}
