@page "/1/1_3"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Wgc
@using GoWMS.Server.Models.Inb


@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService
@inject MasService ObjMasService
@inject WgcService ObjWgcService
@inject UserServices OpjUserService
@inject InboundService ObjInboundService
@inject ISnackbar Snackbar
@inject IStringLocalizer<IbpPalletMap> L
@inject IJSRuntime js
@attribute [Authorize]

<MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (@elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>

    <MudItem xs="12">
        <div class="form-group">
            <input Id="inputBar" style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="@stringput" @onkeyup="@KeyUp" placeholder="Input scan" />
        </div>
    </MudItem>

</MudGrid>

<MudGrid>
       <MudItem xs="3">
           <MudCheckBox ReadOnly="@ReadOnly" @bind-Checked="@chkboxGate" Label="TAG" Color="Color.Primary" Size="Size.Large"></MudCheckBox>
       </MudItem>
         <MudItem xs="3">
        <MudCheckBox ReadOnly="@ReadOnly" @bind-Checked="@chkboxConfirm" Label="CONFIRM" Color="Color.Success" Size="Size.Large"></MudCheckBox>
        </MudItem>
</MudGrid>


<br />

@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
   @* <MudTable Items="@Elements"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
          Filter="new Func<Inb_Goodreceive_Go,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@L["MasterPallet"] : [ @mPalletcode ]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>@L["SeqNo"]</MudTh>
            <MudTh>@L["ItemCode"]</MudTh>
            <MudTh>@L["ItemName"]</MudTh>
            <MudTh>@L["Qty"]</MudTh>
            <MudTh>@L["Unit"]</MudTh>
            <MudTh>@L["Action"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="SEQ">@context.Itemtag</MudTd>
            <MudTd DataLabel="Material">@context.Itemcode</MudTd>
            <MudTd DataLabel="Description">@context.Itemname</MudTd>
            <MudTd DataLabel="Qty">@string.Format(VarGlobals.FormatN3, @context.Quantity)</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>DeleteMap(@context.Itemtag))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>*@


    
    <MudDataGrid T="Inb_Goodreceive_Go" 
        Items="@Elements"
        Filterable="true" 
        QuickFilter="@_quickFilter"
        Hideable="true"
        FixedHeader="@fixed_header"    
        FixedFooter="@fixed_footer" 
        Height="@(fixed_header || fixed_footer ? VarGlobals.TableHeight:"")" 
        Dense="@dense" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">@L["MasterPallet"] : [ @mPalletcode ]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
            <Column T="Inb_Goodreceive_Go" Field="Itemtag" Title="@L["SeqNo"]" />
             <Column T="Inb_Goodreceive_Go" Field="Itemcode" Title="@L["ItemCode"]" />
            <Column T="Inb_Goodreceive_Go" Field="Itemname" Title="@L["ItemName"]" />
             <Column T="Inb_Goodreceive_Go" Field="Quantity" Title="@L["Qty"]">
            <CellTemplate>
                @string.Format(VarGlobals.FormatN3, context.Item.Quantity) 
            </CellTemplate>

        </Column>
        <Column T="Inb_Goodreceive_Go" Field="Unit" Title="@L["Unit"]" />
            <Column T="Inb_Goodreceive_Go" Title="@L["Action"]" Filterable="false">
              <CellTemplate>
                    <MudIconButton Size="@Size.Small" 
                        Icon="@Icons.Outlined.Delete" 
                        Color="Color.Primary" 
                        OnClick="@(()=>DeleteMap(@context.Item.Itemtag))"/>
              </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Inb_Goodreceive_Go" />
    </PagerContent>
</MudDataGrid>

}

@code {
    //public string mPagedesc { get; set; } = "1.1.Receiving Order";
    //private string mPagename { get; set; } = "/1/1_1";

    private string pageheader { get; set; } = "1.4.Putaway";
    private bool _processing = false;

    public string mPagedesc { get; set; } = "1.4.Putaway";
    private string mPagename { get; set; } = "/1/1_4";


    private string msgAction = "Enter TAG No.";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    public string stringput { get; set; } = "";
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private bool fixed_header = true;
    private bool fixed_footer = true;

    private Inb_Goodreceive_Go selectedItem = null;
    private HashSet<Inb_Goodreceive_Go> selectedItems = new HashSet<Inb_Goodreceive_Go>();
    private IEnumerable<Inb_Goodreceive_Go> Elements = new List<Inb_Goodreceive_Go>();
    private IEnumerable<Api_Receivingorders_Go> MapPalletItem = new List<Api_Receivingorders_Go>();
    private IEnumerable<Mas_Pallet_Go> MasterPallets = new List<Mas_Pallet_Go>();
    private IEnumerable<Inb_Goodreceive_Go> MasterTags = new List<Inb_Goodreceive_Go>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    public string StringKeyPressed = "AAA";

    string KeyPressed = "";
    string EventInfo = "";

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    private string compGate = "STORE-G07";
    private string compCommand = "STORE-CONFIRM";

    private ElementReference firstInput;

    public bool chkboxGate { get; set; } = false;
    public bool chkboxConfirm { get; set; } = false;

    public bool ReadOnly { get; set; } = true;


    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            //KeyPressed = "";
            //EventInfo = "";
            StringKeyPressed = "";
            KeyPressed = "Key Pressed is " + args.Key;
            EventInfo = "Event Type " + args.Type;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();

        //ErpApiService objCS = new ErpApiService();

        //Elements = await Task.Run(() => objCS.GetAllApiRecevingorderGosypallet(mPalletcode));
        //MasterPallets = ObjMasService.GetAllMasterPallets();

        MasterTags = await Task.Run(() => objCS.GetAllInbGoodreceiveGos());

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus the element
            await Focus("inputBar");
        }
    }

    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("jsfunction.focusElement", elementId);
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            var allCorrect = MasterTags.Where(a => a.Itemtag == str).ToList();

            if (allCorrect.ToList().Count > 0)
            {
                mPalletcode = str;

                //MapPalletItem = null;
                //MapPalletItem = ObjWgcService.GetMapPalletApiNewDelivery_note(mPalletcode);
                //if (MapPalletItem.ToList().Count > 0)
                //{
                //    Task<string> retString;
                //    retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode);
                //    //ObjErpApiService.UpdateReceivingOrderbypack(mPalletcode, mPackid);

                msgAction = "Enter Gate  for Put away";
                elevation = 1;
                chkboxGate=true;

                //}
                //else
                //{
                //    mPalletcode = "";
                //    msgAction = "Enter TAG No.";
                //    elevation = 1;
                //}
            }
            else
            {
                mPalletcode = "";
                elevation = 4;
                msgAction = "TAG No find not found";
                chkboxGate=false;
            }
        }
        else
        {
            if (str == compCommand)
            {
                if (Elements.ToList().Count > 0)
                {

                    ////ObjErpApiService.UpdateReceivingOrderbypallet(mPalletcode);
                    //ObjErpApiService.SetMappedPallet(mPalletcode);
                    //ObjWgcService.UpdatePalletNewDelivery_note(mPalletcode);

                    //await Task<> CrestePutAway();

                    //await Task.Run(() => CrestePutAway());
                    chkboxConfirm =true;
                    //await Task.Run(() => CrestePutAway());
                    CrestePutAway();

                    chkboxConfirm=false;
                    chkboxGate = false;

                    MasterTags =  ObjInboundService.GetAllInbGoodreceiveGos();

                }
                else
                {
                    elevation = 3;
                    msgAction = "Please enter TAG No.";
                    chkboxGate = false;
                }
            }
            else
            {
                mPackid = str;
                MapPalletItem = null;
                chkboxConfirm=false;
                chkboxGate = false;
                //MapPalletItem = ObjErpService.GetErpMatReceivingOrdersByTag(mPackid);
                //if (MapPalletItem.ToList().Count > 0)
                //{
                //    Task<string> retString;

                //    retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode);

                //    //ObjErpApiService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
                //    msgAction = "Enter PalletGo for complete";
                //    elevation = 1;
                //}
                //else
                //{

                //}
            }
        }

        Elements = ObjInboundService.GetAllInbGoodreceiveGobyTag(mPalletcode);

        //ErpApiService objGR = new ErpApiService();
        //Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue
            string pallettemp = stringput;

            setstr(pallettemp);

            //Reset();
        }
    }

    void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {

            string pallettemp = stringput;

            setstr(pallettemp);
            Reset();
        }
    }

    private bool FilterFunc(Inb_Goodreceive_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itembar.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Docno} {element.Lotno}".Contains(searchString))
            return true;
        return false;
    }

    private void DeleteMap(string pack)
    {
        msgAction = "Cancle successfully";
        ObjErpApiService.CancelReceivingOrderbypack(mPalletcode, pack);


        //ErpApiService objGR = new ErpApiService();
        //Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);

    }

    private void Reset()
    {
        this.stringput = string.Empty;
        StateHasChanged();
    }


     public void  CrestePutAway()
    {

        string msgReturn = "Call";
        bool bitReturn;
        //bitReturn = await Task.Run(() => ObjInboundService.CreatePutawayWms("PL001", mPalletcode, "G07", "01", ref msgReturn));
        bitReturn =  ObjInboundService.CreatePutawayWms("PL001", mPalletcode, "G07", "01", ref msgReturn);

        if (bitReturn == false)
        {
            elevation = 4;
            msgAction = msgReturn;

            Snackbar.Add(msgReturn, Severity.Error);
         
        }else
        {
             Snackbar.Add(msgReturn, Severity.Success);
            elevation = 2;
            msgAction = "Mapping successfully";
        }

        mPalletcode = "";

    }


        private string _searchString;
    private bool _sortNameByLength;
    // custom sort by name length
    private Func<Inb_Goodreceive_Go, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Itembar.Length;
        else
            return x.Itembar;
    };

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Inb_Goodreceive_Go, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Itembar.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Itemcode.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Itemname} {x.Docno} {x.Lotno}".Contains(_searchString))
            return true;

        return false;
    };
}
