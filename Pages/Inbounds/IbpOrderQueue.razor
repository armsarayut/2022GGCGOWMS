@page "/1/1_3"
@using System
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Pdf
@using GoWMS.Server.Data
@using GoWMS.Server.Reports
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inb
@using GoWMS.Server.Controllers
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService

@inject ReportService UserlogService
@inject InboundService ObjInboundService
@inject UserServices OpjUserService
@inject IStringLocalizer<IbpOrderQueue> L
@inject ISnackbar Snackbar
@inject IPrintingService PrintingService

@attribute [Authorize]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: left;
    }
</style>

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
   @*     <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>*@
    </MudAppBar>

@*    <MudTable Hover="@hover" Breakpoint="Breakpoint.Sm" Height="@(fixed_header || fixed_footer ?"500px":"")" FixedHeader="@fixed_header"
              Items="@Elements"
              Dense="@dense"
              FixedFooter="@fixed_footer"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Inb_Goodreceive_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>

            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

     
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Created)">@L["GRDatetime"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Pono)">@L["DNNo"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Itemcode)">@L["ItemCode"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Itemname)">@L["ItemName"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Quantity)">@L["Qty"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Unit)">@L["Unit"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Docno)">@L["LotNo"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceive_Go, object>(x=>x.Docnote)">@L["BatchNo"]</MudTableSortLabel></MudTh>
            <MudTh>@L["Adjust"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@L["GRDatetime"]">@Convert.ToDateTime(context.Created).ToString(VarGlobals.FormatDT)</MudTd>
            <MudTd DataLabel="@L["DNNo"]">@context.Pono</MudTd>
            <MudTd DataLabel="@L["ItemCode"]">@context.Itemcode</MudTd>
            <MudTd DataLabel="@L["ItemName"]">@context.Itemname</MudTd>
            <MudTd DataLabel="@L["Qty"]" Style="text-align: right">@string.Format(VarGlobals.FormatN2, context.Quantity)</MudTd>
            <MudTd DataLabel="@L["Unit"]">@context.Unit</MudTd>
            <MudTd DataLabel="@L["LotNo"]">@context.Lotno</MudTd>
            <MudTd DataLabel="@L["BatchNo"]">@context.Pallettag</MudTd>
            <MudTd DataLabel="@L["Adjust"]">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Color="Color.Secondary" @onclick="@(()=>DeleteMap(@context.Pallteno, @context.Pallettag))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>

    </MudTable>*@



    <MudDataGrid T="Inb_Goodreceive_Go" 
        Items="@Elements"
        SortMode="SortMode.Multiple"
        Filterable="true" 
        QuickFilter="@_quickFilter"
        Hideable="true"
        FixedHeader="@fixed_header"    
        FixedFooter="@fixed_footer" 
        Height="@(fixed_header || fixed_footer ? VarGlobals.TableHeight:"")" 
        Dense="@dense" >
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
            <Column T="Inb_Goodreceive_Go" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Field="Created" Title="@L["GRDatetime"]">
            <CellTemplate>
                @Convert.ToDateTime(context.Item.Created).ToString(VarGlobals.FormatDT)
            </CellTemplate>
        </Column>
        <Column T="Inb_Goodreceive_Go" Field="Pono" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["DNNo"]" />
        <Column T="Inb_Goodreceive_Go" Field="Itemcode" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["ItemCode"]" />
        <Column T="Inb_Goodreceive_Go" Field="Itemname" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["ItemName"]" />
        <Column T="Inb_Goodreceive_Go" Field="Quantity" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["Qty"]">
            <CellTemplate>
                @string.Format(VarGlobals.FormatN3, context.Item.Quantity) 
            </CellTemplate>
        </Column>
        <Column T="Inb_Goodreceive_Go" Field="Unit" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["Unit"]"/>
        <Column T="Inb_Goodreceive_Go" Field="Lotno" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["LotNo"]"/>
            <Column T="Inb_Goodreceive_Go" Field="Pallettag" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["SUNo"]" />
        <Column T="Inb_Goodreceive_Go" HeaderStyle="@($"color:{VarGlobals.TableHeaderColor};")" Title="@L["Adjust"]" Filterable="false">
              <CellTemplate>

                  <MudIconButton Size="@Size.Small"
                               Icon="@Icons.Outlined.Print"
                               Color="Color.Info"
                               OnClick="@(()=>ReprintTag(context.Item.Efidx.Value))" />

                    <MudIconButton Size="@Size.Small" 
                        Icon="@Icons.Outlined.Delete" 
                        Color="Color.Warning"
                               OnClick="@(()=>DeleteMapTran(context.Item.Efidx.Value, context.Item.Quantity.Value ,context.Item.Docno,context.Item.Itemcode, context.Item.Itembar ))" />
                    
              </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Inb_Goodreceive_Go" />
    </PagerContent>
</MudDataGrid>

}

@code {

    private bool _dense = true;
    private bool _multiSelect = false;

    private string pageheader { get; set; } = "1.3.Good Receive";
    private bool _processing = false;

    public string mPagedesc { get; set; } = "1.3.Good Receive";
    private string mPagename { get; set; } = "/1/1_3";

    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inb_Goodreceive_Go selectedItem = null;
    private HashSet<Inb_Goodreceive_Go> selectedItems = new HashSet<Inb_Goodreceive_Go>();
    private IEnumerable<Inb_Goodreceive_Go> Elements = new List<Inb_Goodreceive_Go>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    List<ggcTag4x4> TagList = new List<ggcTag4x4>();

    protected override async Task OnInitializedAsync()
    {
        InboundService objCS = new InboundService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetAllInbGoodreceiveGos());
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sUsername = user.Identity.Name;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private void setstr(string str)
    {

    }



    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Inb_Goodreceive_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemtag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Docno} {element.Pono} {element.Docnote}".Contains(searchString))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                IbpOrderQueueRptExcel excelReport = new IbpOrderQueueRptExcel();
                List<Inb_Goodreceive_Go> listExcelReport = new List<Inb_Goodreceive_Go>();
                listExcelReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
                this.InsertAuditrial("Export excel file :" + fileName.ToString(), pageheader);
            }


        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                IbpOrderQueueRptPdf pdfReport = new IbpOrderQueueRptPdf();
                List<Inb_Goodreceive_Go> listPdfReport = new List<Inb_Goodreceive_Go>();
                listPdfReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
                this.InsertAuditrial("Export pdf file :" + fileName.ToString(), pageheader);
            }


        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    private async Task DeleteMapTran(long tranId, decimal tranQty, string tranDoc, string tranItem, string tranTag)
    {
        bool? result = await CheckRoleApprove();

        if (result == true)
        {

            string state = "";

            state = await ConfirmDelete();

            if (state=="Deleted")
            {
                string msg = "";

                if (ObjInboundService.CancelReceivingOrdersBypackId_SP(tranId, tranQty, tranDoc, tranItem, tranTag, ref msg))
                {
                    this.InsertAuditrial("Cancel ReceivingOrder TAG : " + tranTag + " SKU : " + tranItem + " Qty : " + tranQty.ToString() + " From Doc : " + tranDoc, pageheader);
                    Snackbar.Add(msg, Severity.Success);
                    //Elements = ObjInboundService.GetAllInbGoodreceiveGos();
                    Elements = await Task.Run(() => ObjInboundService.GetAllInbGoodreceiveGos());
                    this.StateHasChanged();
                }
                else
                {
                    Snackbar.Add(msg, Severity.Error);
                }
            }
            

            //ObjInboundService.CancelReceivingOrdersBypackId(tranId, tranQty, tranDoc,tranItem, tranTag);

          

            
        }

        this.StateHasChanged();

    }

    private async Task DeleteMap(string pallet, string pack)
    {
        bool? result = await CheckRoleApprove();

        if (result == true)
        {
            ObjInboundService.CancelReceivingOrdersBypack(pallet, pack);

            this.InsertAuditrial("Cancel ReceivingOrder SeqNO : " + pack + " From Pallet : " + pallet, pageheader);

            Elements = ObjInboundService.GetAllInbGoodreceiveGos();
        }

        this.StateHasChanged();

    }

    private async Task DeleteMapPallet(string pallet)
    {
        bool? result = await CheckRoleApprove();

        if (result == true)
        {
            ObjInboundService.CancelReceivingOrdersByPallet(pallet);

            this.InsertAuditrial("Cancel ReceivingOrders From Pallet : " + pallet, pageheader);

            Elements = ObjInboundService.GetAllInbGoodreceiveGos();
        }

        this.StateHasChanged();

    }

    private async Task ReprintTag(long apiid)
    {
        bool? result = await CheckRoleReport();
        if (result == true)
        {
            TagList = ObjInboundService.GetTagGGCByIndexAddUser(apiid, sUsername);

            ggcTag4x4Pdf pdfReport = new ggcTag4x4Pdf();
            List<ggcTag4x4> listPdfReport = new List<ggcTag4x4>();
            listPdfReport = TagList.ToList();

            await PrintingService.Print(new PrintOptions(Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport))) { Base64 = true });
            this.InsertAuditrial("Re-print Tag from id : " + apiid.ToString(), pageheader);

        }
       
    }

    private string _searchString;
    private bool _sortNameByLength;
    // custom sort by name length
    private Func<Inb_Goodreceive_Go, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Pono.Length;
        else
            return x.Pono;
    };

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Inb_Goodreceive_Go, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Pallteno.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Itemtag.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Itemcode.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Itemname} {x.Docno} {x.Pono} {x.Docnote}".Contains(_searchString))
            return true;

        return false;
    };

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion

    private async Task<string> ConfirmDelete()
    {
        string state = "";

        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Cancelled" : "Deleted";

        return state;

    }

}
