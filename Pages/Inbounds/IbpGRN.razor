@page "/1/1_1"
@using System
@using System.Data;
@using System.IO
@using System.Linq
@using System.Text
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.Generic

@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models;
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Inb
@using Microsoft.Extensions.Localization
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<IbpGRN> L
@inject IJSRuntime JSRuntime
@inject ReportService UserlogService
@inject CustomerService ObjCustomService
@inject UserServices OpjUserService
@inject InboundService ObjInboundService
@inject IPrintingService PrintingService


@attribute [Authorize]

@if (Elements == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudText Typo="Typo.h6" Color="Color.Primary">@pageheader</MudText>

    <MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

 @*   <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Inb_Goodreceipt_Go,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>

            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docdate)">@L["DNDate"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Pono)">@L["DNNo"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Pallettag)">@L["DNSeq"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Itemcode)">@L["ItemCode"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Itemname)">@L["ItemName"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Quantity)">@L["Qty"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Unit)">@L["Unit"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Weight)">@L["Weight"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docno)">@L["LotNo"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Inb_Goodreceipt_Go, object>(x=>x.Docnote)">@L["BatchNo"]</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@L["DNDate"]">@Convert.ToDateTime(context.Docdate).ToString(VarGlobals.FormatD)</MudTd>
            <MudTd DataLabel="@L["DNNo"]">@context.Pono</MudTd>
            <MudTd DataLabel=@L["DNSeq"]>@context.Pallettag</MudTd>
            <MudTd DataLabel="@L["ItemCode"]">@context.Itemcode</MudTd>
            <MudTd DataLabel="@L["ItemName"]">@context.Itemname</MudTd>
            <MudTd DataLabel="@L["Qty"]" Style="text-align: right">@string.Format(VarGlobals.FormatN0, context.Quantity)</MudTd>
            <MudTd DataLabel="@L["Unit"]">@context.Unit</MudTd>
            <MudTd DataLabel="@L["Weight"]" Style="text-align: right">@string.Format(VarGlobals.FormatN2, context.Weight) </MudTd>
            <MudTd DataLabel="@L["LotNo"]">@context.Docno</MudTd>
            <MudTd DataLabel="@L["BatchNo"]">@context.Docnote</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />

        </PagerContent>
    </MudTable>*@

 <MudDataGrid T="Api_ggc" Items="@Elements" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true"  FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"500px":"")" Dense="@dense" >
    <ToolBarContent>
    @* <MudText Typo="Typo.h6">@pageheader</MudText>*@
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @*<SelectColumn T="Api_ggc" />*@
        <Column T="Api_ggc" Field="Receiving_date" Title="@L["DNDate"]" />
        <Column T="Api_ggc" Field="Doc_ref" Title="@L["DNNo"]" />
        <Column T="Api_ggc" Field="Batch_no" Title="@L["BatchNo"]" />
        <Column T="Api_ggc" Field="Item_code" Title="@L["ItemCode"]" />
        <Column T="Api_ggc" Field="Total_qty" Title="@L["Qty"]" />     
        <Column T="Api_ggc" Field="Remark" Title="REMARK" />
        <Column T="Api_ggc" Field="Gr_qty" Title="GR Qty"/>
@*        <Column T="Api_ggc" Field="Gr_remark" Title="GRRemark" />*@
         <Column T="Api_ggc" Title="PRINTTAG">
              <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Print" OnClick="@(()=>TestCreateTag(context.Item.Idx.Value))" />
              </CellTemplate>
         </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Api_ggc" />
    </PagerContent>
</MudDataGrid>



}

@code {

    private string msgAction = "Enter Palletcode";

    public string pageheader { get; set; } = "1.1.Receiving Order";

    public string mPagedesc { get; set; } = "1.1.Receiving Order";
    private string mPagename { get; set; } = "/1/1_1";

    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Api_ggc selectedItem = null;
    private HashSet<Api_ggc> selectedItems = new HashSet<Api_ggc>();
    private IEnumerable<Api_ggc> Elements = new List<Api_ggc>();
    List<Userroleinfo> Roles = new List<Userroleinfo>();

    List<ggcTag4x4> TagList = new List<ggcTag4x4>();



    [Inject] private IDialogService DialogService { get; set; }


    public int elevation = 0;

    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        ErpApiService objCS = new ErpApiService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));

        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);

        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetApiInboundAll());
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sUsername = user.Identity.Name;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private void setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            mPalletcode = str;
            msgAction = "Enter Pack ID";
            elevation = 3;
        }
        else
        {
            if (str == mPalletcode)
            {
                elevation = 2;
                msgAction = "Mapping successfully";
                ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
                mPalletcode = "";
            }
            else
            {
                mPackid = str;
                ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            }
        }
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue;
            setstr(palletcode);

            palletcode = "";
        }
    }

    private bool FilterFunc(Api_ggc element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Batch_no.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Doc_ref.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Create_by} {element.Doc_item_ref}".Contains(searchString))
            return true;
        return false;
    }

    private string _searchString;
    private bool _sortNameByLength;
    // custom sort by name length
    private Func<Api_ggc, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Doc_ref.Length;
        else
            return x.Doc_ref;
    };

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Api_ggc, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Batch_no.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Doc_ref.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Item_code.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Doc_item_ref} {x.Create_by}".Contains(_searchString))
            return true;

        return false;
    };


    public async Task DownloadExcelDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            //if (result == true)
            //{
            //    IbpGRNRptExcel excelReport = new IbpGRNRptExcel();
            //    List<Api_ggc> listExcelReport = new List<Api_ggc>();
            //    listExcelReport = Elements.ToList();
            //    var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
            //    await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
            //    this.InsertAuditrial("Export excel file :" + fileName.ToString(), pageheader);
            //}

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            //if (result == true)
            //{
            //    IbpGRNRprPdf pdfReport = new IbpGRNRprPdf();
            //    List<Api_ggc> listPdfReport = new List<Api_ggc>();
            //    listPdfReport = Elements.ToList();
            //    var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
            //    //await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.Report(listPdfReport)));
            //    await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
            //    this.InsertAuditrial("Export pdf file :" + fileName.ToString(), pageheader);
            //}
        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion


    public async Task TestCreateTag(long apiid)
    {

        var guid = Guid.NewGuid().ToString();

        DataTable dtTrans = new DataTable("ptyGenWmsTransGGC");
        dtTrans.Columns.Add("tyitem", typeof(System.String));
        dtTrans.Columns.Add("tyqty", typeof(System.Decimal));
        dtTrans.Columns.Add("tylot", typeof(System.String));
        dtTrans.Columns.Add("tyexpdate", typeof(System.DateTime));
        dtTrans.Columns.Add("typallet", typeof(System.String));

        DataRow _ravi = dtTrans.NewRow();
        _ravi["tyitem"] = "AAA";
        _ravi["tyqty"] = 10.9;
        _ravi["tylot"] = "LOT0001";
        _ravi["tyexpdate"] = DateTime.Now;
        _ravi["typallet"] = "1";
        dtTrans.Rows.Add(_ravi);

        ObjInboundService.CreateTagno(apiid, 1, 5, "A0001", sUsername, dtTrans);

        //TagList = ObjInboundService.GetTagGGCByIndex(apiid);

        TagList = await Task.Run(() => ObjInboundService.GetTagGGCByIndex(apiid));

        ggcTag4x4Pdf pdfReport = new ggcTag4x4Pdf();
        List<ggcTag4x4> listPdfReport = new List<ggcTag4x4>();
        listPdfReport = TagList.ToList();

        await PrintingService.Print(new PrintOptions(Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport))) { Base64 = true });


    }
}
