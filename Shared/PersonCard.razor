@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

@using GoWMS.Server.Data;

<MudCard Elevation="0" Square="true" Class="@Class" Style="@Style">
     <div class="d-flex justify-center mb-1">
                 <img src="Images/AEI LOGO MASTER APP 200x100.png" width="250px" height="100px" style="align-items:center" />
            </div>
        @*    <MudAvatar Image="Images/AEI LOGO MASTER APP 200x100.png" /> *@
    <MudCardHeader > 
        <CardHeaderAvatar>
            @if (sGroupID == "1")
            {
                <MudAvatar Image="images/programmer.png" /> }
            else if (sGroupID == "2")
            {
                <MudAvatar Image="images/man.png" /> }
            else if (sGroupID == "3")
            {
                <MudAvatar Image="images/businessman.png" /> }
            else if (sGroupID == "4")
            {
                <MudAvatar Image="images/man.png" /> }
            else if (sGroupID == "5")
            {
                <MudAvatar Image="images/guest-icon.jpg" /> }
            else
            {
                <MudAvatar Image="images/maori.png" />}
        </CardHeaderAvatar>

        <CardHeaderContent>
            <MudText Typo="Typo.body2">Welcome</MudText>
            <MudText Typo="Typo.caption">@(sRole)</MudText>
        </CardHeaderContent>
    </MudCardHeader>

</MudCard>

@code { [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }


    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        sUsername = user.Identity.Name;

        sRole = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Email)?.Value;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }


    }